function[V1, V2] = Cal_TSPoi_SE(starting_value, delta2, delta3, ...
    x, z, y1, y2, y3, gmm)
% This script calculates the robust standard error of the two-stage Poisson 
% maximum likelihood estimation.

% y1, y2, and y3 are N x 1 vectors.
% x is N x (P - 2) matrix.
% beta1 is 1 x (P - 2) vector.

% First-step parameters:
% delta2 and delta3 are (J - 1)/2 x 1 vector.
% gmm is a scalar.

n_obs = size(x, 1);

% Second-step parameters:
beta1 = starting_value(1:end-2);
mu2 = starting_value(end - 1);
mu3 = starting_value(end);

% Calculate log-likelihood function
q2 = 2.*y2 - 1; q3 = 2.*y3 - 1;            % N x 1 vector
w2 = q2.*(z*delta2); w3 = q3.*(z*delta3);  % N x 1 vector
gmms = q2.*q3.*gmm;                        % N x 1 vector

SIGMA_2 = [1, gmm; gmm, 1];                % 2 x 2 matrix
SIGMA_2n = [1, -gmm; -gmm, 1];             % 2 x 2 matrix

MU_2 = zeros(1, 2);
X_2 = [w2 + q2.*mu2, w3 + q3.*mu3];
X = [w2, w3];

lambda = exp(x*beta1);                     % N x 1 vector
Phi_mu = y2.*y3.*mvncdf(X_2, MU_2, SIGMA_2) ...
    + y2.*(1 - y3).*mvncdf(X_2, MU_2, SIGMA_2n) ...
    + (1 - y2).*y3.*mvncdf(X_2, MU_2, SIGMA_2n) ...
    + (1 - y2).*(1 - y3).*mvncdf(X_2, MU_2, SIGMA_2);
Phi = y2.*y3.*mvncdf(X, MU_2, SIGMA_2) ...
    + y2.*(1 - y3).*mvncdf(X, MU_2, SIGMA_2n) ...
    + (1 - y2).*y3.*mvncdf(X, MU_2, SIGMA_2n) ...
    + (1 - y2).*(1 - y3).*mvncdf(X, MU_2, SIGMA_2);
phi_mu = y2.*y3.*mvnpdf(X_2, MU_2, SIGMA_2) ...
    + y2.*(1 - y3).*mvnpdf(X_2, MU_2, SIGMA_2n) ...
    + (1 - y2).*y3.*mvnpdf(X_2, MU_2, SIGMA_2n) ...
    + (1 - y2).*(1 - y3).*mvnpdf(X_2, MU_2, SIGMA_2);
phi = y2.*y3.*mvnpdf(X, MU_2, SIGMA_2) ...
    + y2.*(1 - y3).*mvnpdf(X, MU_2, SIGMA_2n) ...
    + (1 - y2).*y3.*mvnpdf(X, MU_2, SIGMA_2n) ...
    + (1 - y2).*(1 - y3).*mvnpdf(X, MU_2, SIGMA_2);
Psi = Phi_mu./Phi;
lambda_s = lambda.*Psi;


% Calculate derivative of Psi with respect to mu:
psi_mu2 = q2.*normpdf(w2 + q2.*mu2)./Phi.* ...
    normcdf((w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2));
psi_mu3 = q3.*normpdf(w3 + q3.*mu3)./Phi.* ...
    normcdf((w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2));

% The gradients
g_beta1 = x.*(y1 - lambda_s);
g_mu2 = (psi_mu2./Psi).*(y1 - lambda_s);
g_mu3 = (psi_mu3./Psi).*(y1 - lambda_s);
s = [g_beta1, g_mu2, g_mu3];

% Calculate the derivatives of psi_mu with respect to mu:
psi_mu2_mu2 = -normpdf(w2 + q2.*mu2)./Phi.*(...
    (w2 + q2.*mu2).*normcdf((w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2)) ...
    + normpdf((w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2)).* ...
    gmms./sqrt(1 - gmms.^2));
    
psi_mu3_mu3 = -normpdf(w3 + q3.*mu3)./Phi.*(...
    (w3 + q3.*mu3).*normcdf((w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2)) ...
    + normpdf((w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2)).* ...
    gmms./sqrt(1 - gmms.^2));
    
psi_mu2_mu3 = q2.*q3./Phi.*normpdf(w2 + q2.*mu2)./sqrt(1 - gmms.^2) ...
    .*normpdf((w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2));
    
%psi_mu3_mu2 = q2.*q3./Phi.*normpdf(w3 + q3.*mu3)./sqrt(1 - gmms.^2) ...
%    .*normpdf((w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2));
    
hbb = -x'*(lambda_s.*x);
hbm2 = -sum(psi_mu2.*lambda.*x, 1);
hbm3 = -sum(psi_mu3.*lambda.*x, 1);
hm2m3 = sum(((psi_mu2_mu3.*Psi - psi_mu2.*psi_mu3)./(Psi.^2)).*(y1 - lambda_s)...
    - (psi_mu2.*psi_mu3./Psi).*lambda, 1);
hm2m2 = sum( ((psi_mu2_mu2.*Psi - psi_mu2.^2)./(Psi.^2)).*(y1 - lambda_s)...
    - ((psi_mu2.^2)./Psi).*lambda, 1);
hm3m3 = sum( ((psi_mu3_mu3.*Psi - psi_mu3.^2)./(Psi.^2)).*(y1 - lambda_s)...
    - ((psi_mu3.^2)./Psi).*lambda, 1);
    
H = [hbb, hbm2', hbm3'; hbm2, hm2m2, hm2m3; ...
    hbm3, hm2m3, hm3m3];


% N x (J - 1)/2 matrices
dPsi_ddelta2 = (normpdf(w2 + q2.*mu2).* ...
    normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ) ...
    - Psi.*normpdf(w2).*normcdf((w3 - gmms.*w2)./sqrt(1 - gmms.^2))).*q2./Phi.*z;
dPsi_ddelta3 = ((normpdf(w3 + q3.*mu3).* ...
    normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ) ...
    - Psi.*normpdf(w3).*normcdf((w2 - gmms.*w3)./sqrt(1 - gmms.^2))).*q3./Phi).*z;
% N x 1 vector
dPsi_dgmm = q2.*q3.*Psi.*(phi_mu./Phi_mu - phi./Phi);

% N x (J - 1)/2 matrices
dpsi_mu2_ddelta2 = -(q2.^2)./(Phi.^2).*z.*( ...
    normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) )...
    .*( (w2 + q2.*mu2).*Phi + normpdf(w2).* normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ) )...
    + normpdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) )...
    .*gmms./sqrt(1 - gmms.^2).*Phi);
dpsi_mu2_ddelta3 = q2.*q3.*normpdf(w2 + q2.*mu2)./(Phi.^2).*z ...
    .* (normpdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ).*Phi./sqrt(1 - gmms.^2) ...
    - normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ).*normpdf(w3) ...
    .*normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ));
% N x 1 vector
dpsi_mu2_dgmm = q3.*normpdf(w2 + q2.*mu2)./(Phi.^2) ...
    .* (normpdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ).*Phi./sqrt(1 - gmms.^2) ...
    .*(-(w2 + q2.*mu2) - (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2)).*(1 - gmms.^2)./2) ...
    - normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ).*phi);
% N x (J - 1)/2 matrices
dpsi_mu3_ddelta2 = -(q3.^2)./(Phi.^2).*z.*( ...
    normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) )...
    .*( (w3 + q3.*mu3).*Phi + normpdf(w3).* normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ) )...
    + normpdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) )...
    .*gmms./sqrt(1 - gmms.^2).*Phi);
dpsi_mu3_ddelta3 = q2.*q3.*normpdf(w3 + q3.*mu3)./(Phi.^2).*z ...
    .* (normpdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ).*Phi./sqrt(1 - gmms.^2) ...
    - normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ).*normpdf(w2) ...
    .*normcdf( (w3 + q3.*mu3 - gmms.*(w2 + q2.*mu2))./sqrt(1 - gmms.^2) ));
% N x 1 vector
dpsi_mu3_dgmm = q2.*normpdf(w3 + q3.*mu3)./(Phi.^2) ...
    .* (normpdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ).*Phi./sqrt(1 - gmms.^2) ...
    .*(-(w3 + q3.*mu3) - (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3)).*(1 - gmms.^2)./2) ...
    - normcdf( (w2 + q2.*mu2 - gmms.*(w3 + q3.*mu3))./sqrt(1 - gmms.^2) ).*phi);

dl_dbeta_ddelta2 = -(x.*lambda)'*dPsi_ddelta2;
dl_dbeta_ddelta3 = -(x.*lambda)'*dPsi_ddelta3; 
dl_dbeta_dgmm = -sum(x.*lambda.*dPsi_dgmm)';

dl_dmu2_ddelta2 = sum((dpsi_mu2_ddelta2.*Psi - psi_mu2.*dPsi_ddelta2).*y1./(Psi.^2) ...
    - dpsi_mu2_ddelta2.*lambda);
dl_dmu2_ddelta3 = sum((dpsi_mu2_ddelta3.*Psi - psi_mu2.*dPsi_ddelta3).*y1./(Psi.^2) ...
    - dpsi_mu2_ddelta3.*lambda);
dl_dmu2_dgmm = sum((dpsi_mu2_dgmm.*Psi - psi_mu2.*dPsi_dgmm).*y1./(Psi.^2) ...
    - dpsi_mu2_dgmm.*lambda);

dl_dmu3_ddelta2 = sum((dpsi_mu3_ddelta2.*Psi - psi_mu3.*dPsi_ddelta2).*y1./(Psi.^2) ...
    - dpsi_mu3_ddelta2.*lambda);
dl_dmu3_ddelta3 = sum((dpsi_mu3_ddelta3.*Psi - psi_mu3.*dPsi_ddelta3).*y1./(Psi.^2) ...
    - dpsi_mu3_ddelta3.*lambda);
dl_dmu3_dgmm = sum((dpsi_mu3_dgmm.*Psi - psi_mu3.*dPsi_dgmm).*y1./(Psi.^2) ...
    - dpsi_mu3_dgmm.*lambda);

% P x J matrix
F = [dl_dbeta_ddelta2, dl_dbeta_ddelta3, dl_dbeta_dgmm; ...
    dl_dmu2_ddelta2, dl_dmu2_ddelta3, dl_dmu2_dgmm; ...
    dl_dmu3_ddelta2, dl_dmu3_ddelta3, dl_dmu3_dgmm]./n_obs;

delta = (1./sqrt(1 - gmms.^2));
v2 = delta.*(w3 - gmms.*w2);
v3 = delta.*(w2 - gmms.*w3);
    
g2 = normpdf(w2).*normcdf(v2);
g3 = normpdf(w3).*normcdf(v3);
d_delta2 = (q2.*g2./Phi).*z;
%disp(size(d_delta2))
d_delta3 = (q3.*g3./Phi).*z;
%disp(size(d_delta3))
d_rho = q2.*q3.*phi./Phi;
%disp(size(d_rho))
g1 = [d_delta2, d_delta3, d_rho];

wRw = (delta.^2).*(w2.^2 + w3.^2 - 2.*gmms.*w2.*w3);
dd_delta2 = -z'*(z.*(w2.*g2./Phi + gmms.*phi./Phi + (g2.^2)./(Phi.^2)));
dd_delta3 = -z'*(z.*(w3.*g3./Phi + gmms.*phi./Phi + (g3.^2)./(Phi.^2)));
dd_delta2_delta3 = (q2.*q3.*z)'*(z.*(phi./Phi - g2.*g3./(Phi.^2)));
dd_delta2_rho = sum((q3.*z.*phi./Phi).*(gmms.*delta.*v2 - w2 - g2./Phi));
dd_delta3_rho = sum((q2.*z.*phi./Phi).*(gmms.*delta.*v3 - w3 - g3./Phi));
dd_rho = sum((phi./Phi).*((delta.^2).*gmms.*(1 - wRw) + ...
        (delta.^2).*w2.*w3 - phi./Phi));
H1 = [dd_delta2, dd_delta2_delta3, dd_delta2_rho'; ...
      dd_delta2_delta3, dd_delta3, dd_delta3_rho'; ...
      dd_delta2_rho, dd_delta3_rho, dd_rho];

r = (H1\g1'); % J x N matrix
g = s + (F*r)';

V1 = H\(s'*s)/H;
V2 = H\(g'*g)/H;

end